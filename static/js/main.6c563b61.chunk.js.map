{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItems","date","App","state","currentItem","handleInput","bind","addItem","deleteItem","this","setState","Date","now","toLocaleString","filtered","filter","preventDefault","newItem","console","log","newItems","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAuBeA,MApBf,SAAmBC,GACjB,IACMC,EADQD,EAAME,MACIC,KAAI,SAACC,GAC3B,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,uBAAGD,UAAU,QACX,2BAAOE,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAC1DZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,SAG1C,4BAAQD,UAAU,SAASU,QAAS,kBAAMf,EAAMgB,YAAYZ,EAAKE,OAAjE,KAGA,uBAAGD,UAAU,QAAQD,EAAKa,UAIhC,OAAO,6BAAMhB,ICqEAiB,EArFf,kDACE,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CACXjB,MAAO,GACPkB,YAAa,CACXV,KAAM,GACNJ,IAAK,GACLW,KAAK,KAGT,EAAKI,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKT,UAAY,EAAKA,UAAUS,KAAf,gBAbA,EADrB,wDAmBcV,GACVa,KAAKC,SAAS,CACZN,YAAa,CACXV,KAAME,EAAEE,OAAOL,MACfH,IAAIqB,KAAKC,MACTX,KAAMU,OAAOE,sBAxBrB,iCA6BavB,GACT,IAAMwB,EAAWL,KAAKN,MAAMjB,MAAM6B,QAAO,SAAA3B,GAAI,OAAIA,EAAKE,MAAMA,KAC5DmB,KAAKC,SAAS,CAACxB,MAAM4B,MA/BzB,8BAkCUlB,GACNA,EAAEoB,iBACF,IAAMC,EAAUR,KAAKN,MAAMC,YAE3B,GADAc,QAAQC,IAAIF,GACM,KAAfA,EAAQvB,KAAU,CACnB,IAAM0B,EAAQ,sBAAOX,KAAKN,MAAMjB,OAAlB,CAAwB+B,IACtCR,KAAKC,SAAS,CACZxB,MAAMkC,EACNhB,YAAY,CACVV,KAAK,GACLJ,IAAI,GACJW,KAAK,SA7Cf,gCAoDYP,EAAKJ,GACb,IAAMJ,EAAQuB,KAAKN,MAAMjB,MACzBA,EAAMC,KAAI,SAACC,GACNA,EAAKE,MAAMA,IACZF,EAAKM,KAAOA,MAGhBe,KAAKC,SAAS,CACZxB,MAAOA,MA5Db,+BAiEI,OACE,yBAAKG,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAa6B,SAAUZ,KAAKF,SACnC,2BACElB,UAAU,OACVE,KAAK,OACL+B,YAAY,aACZ7B,MAAOgB,KAAKN,MAAMC,YAAYV,KAC9BC,SAAUc,KAAKJ,cAEjB,4BAAQd,KAAK,SAASF,UAAU,OAAhC,SAGJ,kBAAC,EAAD,CAAWH,MAAOuB,KAAKN,MAAMjB,MAAOc,YAAaS,KAAKD,WAAYX,UAAWY,KAAKZ,iBA/E1F,GAAyB0B,aCQLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.6c563b61.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction ListItems(props) {\n  const items = props.items;\n  const listItems = items.map((item) => {\n    return (\n      <div className=\"list\" key={item.key}>\n        <p className=\"todo\">\n          <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>{\n              props.setUpdate(e.target.value,item.key)\n          }}/>\n        </p>\n        <button className=\"delete\" onClick={() => props.deleteItems(item.key)}>\n          X\n        </button>\n        <p className=\"date\">{item.date}</p>\n      </div>\n    );\n  });\n  return <div>{listItems}</div>;\n}\n\nexport default ListItems;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListItems from './ListItems';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: '',\n        date:''\n      },\n    };\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n\n  \n\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key:Date.now(),\n        date: Date().toLocaleString(),\n      },\n    });\n  }\n\n  deleteItem(key){\n    const filtered = this.state.items.filter(item => item.key!==key);\n    this.setState({items:filtered});\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if(newItem.text!==\"\"){\n      const newItems = [...this.state.items,newItem];\n      this.setState({\n        items:newItems,\n        currentItem:{\n          text:'',\n          key:'',\n          date:''\n        }\n      })\n    }\n  }\n\n\n  setUpdate(text,key){\n    const items = this.state.items;\n    items.map((item) => {\n      if(item.key===key){\n        item.text = text;\n      }\n    })\n    this.setState({\n      items: items\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <input\n              className=\"main\"\n              type=\"text\"\n              placeholder=\"Add a ToDo\"\n              value={this.state.currentItem.text}\n              onChange={this.handleInput}\n            />\n            <button type=\"submit\" className=\"add\">Add</button>\n          </form>\n        </header>\n        <ListItems items={this.state.items} deleteItems={this.deleteItem} setUpdate={this.setUpdate}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}